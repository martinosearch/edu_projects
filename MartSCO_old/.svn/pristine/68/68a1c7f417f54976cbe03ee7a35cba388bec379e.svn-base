package rreport;

import graphicsModel.FrameIcon;
import graphicsModel.MartFrame;

import java.awt.BorderLayout;
import java.awt.Component;
import java.awt.event.ActionEvent;
import java.awt.event.FocusEvent;
import java.awt.event.KeyEvent;
import java.awt.event.MouseEvent;
import java.awt.event.WindowEvent;

import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.SwingUtilities;

import progress.Avancer;

import com.java4less.rreport.RPrintSetupJDK13;
import com.java4less.rreport.RReportJ2X;

import componentFactory.MartButton;

public class RepportPreview extends MartFrame {
	// pour la barre de menu
	private JPanel panBas;

	private MartButton bImprimer = new MartButton().getImprimer();
	private MartButton bExport = new MartButton().getPDF();

	private RReportJ2X report;

	private int currentPage = 1;

	public RepportPreview(RReportJ2X rep) {
		setTitle("APERCU AVANT IMPRESSION");
		setSize(700, 800);
		this.setExtendedState(JFrame.MAXIMIZED_BOTH);
		setLocationRelativeTo(null);
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setToolBar();
		setIcone(new FrameIcon().getPrintView());
		report = rep;

		// pas d'impression immédiate
		report.disablePrinting(true);
		report.setOrientation(report.ORIENTATION_VERTICAL);

		if (report.prepare()) {
			report.endReport();
			initComponent();
		}
	}

	protected void initComponent() {
		// mise sur la barre
		barreOutils.add(bExport);
		barreOutils.add(bImprimer);

		PreviewControl control = new PreviewControl(this);
		barreOutils.add(control);
		control.setZoom(report.getScale());
		control.setNbrePage(report.getMaxPages());
		control.setPage(currentPage);
		bImprimer.setFocusable(false);

		addListeners();

		// le contenenu de bas
		container = new JPanel(new BorderLayout());
		container.add(report, BorderLayout.CENTER);

		this.getContentPane().add(container, BorderLayout.CENTER);
		this.setVisible(true);

		setZoom(1);
		setCurrentPage(currentPage);
	}

	public static void main(String[] args) {
		new RepportPreview(new RReportJ2X(null));
	}

	@Override
	public Avancer getAvancer() {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		Component source = (Component) e.getSource();

		if (source == bImprimer) {
			report.disablePrinting(false);
			report.showPrintDialog = true;

			// RPrintSetupJDK13 pt = new RPrintSetupJDK13();
			// pt.showDialog = true;

			// report.setPrintSetup(pt);

			report.prepare();
			report.endReport();
		}

		if (source == bExport) {
		}
	}

	public void setZoom(final double zoom) {
		SwingUtilities.invokeLater(new Runnable() {
			@Override
			public void run() {
				report.setPreview(true);
				report.setScale(zoom);
				report.revalidate();

				System.out.println("Je réponds " + report.getScale());
			}
		});

	}

	public void setCurrentPage(final int page) {
		SwingUtilities.invokeLater(new Runnable() {
			@Override
			public void run() {
				report.setPreview(true);
				report.setPageNumber(page);
				report.revalidate();

				System.out.println("Je réponds page" + report.getScale());
			}
		});
	}

	@Override
	public void mouseClicked(MouseEvent arg0) {
		// TODO Auto-generated method stub

	}

	@Override
	public void mouseEntered(MouseEvent arg0) {
		// TODO Auto-generated method stub

	}

	@Override
	public void mouseExited(MouseEvent arg0) {
		// TODO Auto-generated method stub

	}

	@Override
	public void mousePressed(MouseEvent arg0) {
		// TODO Auto-generated method stub

	}

	@Override
	public void mouseReleased(MouseEvent arg0) {
		// TODO Auto-generated method stub

	}

	@Override
	public void windowActivated(WindowEvent arg0) {
		// TODO Auto-generated method stub

	}

	@Override
	public void windowClosed(WindowEvent arg0) {
		// TODO Auto-generated method stub

	}

	@Override
	public void windowClosing(WindowEvent arg0) {
		// TODO Auto-generated method stub

	}

	@Override
	public void windowDeactivated(WindowEvent arg0) {
		// TODO Auto-generated method stub

	}

	@Override
	public void windowDeiconified(WindowEvent arg0) {
		// TODO Auto-generated method stub

	}

	@Override
	public void windowIconified(WindowEvent arg0) {
		// TODO Auto-generated method stub

	}

	@Override
	public void windowOpened(WindowEvent arg0) {
		// TODO Auto-generated method stub

	}

	@Override
	public void load() {
		// TODO Auto-generated method stub

	}

	@Override
	public void refresh() {
		// TODO Auto-generated method stub

	}

	@Override
	public void focusGained(FocusEvent arg0) {
		// TODO Auto-generated method stub

	}

	@Override
	public void focusLost(FocusEvent arg0) {
		// TODO Auto-generated method stub

	}

	@Override
	public void keyPressed(KeyEvent arg0) {
		// TODO Auto-generated method stub

	}

	@Override
	public void keyReleased(KeyEvent arg0) {
		// TODO Auto-generated method stub

	}

	@Override
	public void keyTyped(KeyEvent arg0) {
		// TODO Auto-generated method stub

	}
}
