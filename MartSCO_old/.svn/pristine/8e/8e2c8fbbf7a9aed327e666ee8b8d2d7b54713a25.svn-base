package rreport;

import java.awt.Component;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

import javax.swing.JPanel;
import javax.swing.JTextField;

import componentFactory.MartButton;

public class PreviewControl extends JPanel implements ActionListener {

	private JTextField tfPage;
	private RepportPreview pview;
	private MartButton bPrec;
	private MartButton bSuivant;
	private Dimension ctrlDim = new Dimension(30, 30);
	private JTextField tfZoom;
	private MartButton bZoomP;
	private MartButton bZoomM;
	private int page = 1;
	private double zoom = 100;
	private int nbrePage;

	public PreviewControl(RepportPreview pv) {
		pview = pv;
		setPreferredSize(new Dimension(400, 50));
		initComponent();
	}

	private void initComponent() {
		tfPage = new JTextField("1");
		bPrec = new MartButton().getPrecedent();
		bSuivant = new MartButton().getSuivant();

		tfPage.addKeyListener(pview);
		tfPage.setPreferredSize(ctrlDim);
		bPrec.setPreferredSize(ctrlDim);
		bSuivant.setPreferredSize(ctrlDim);

		// pour le zoom
		tfZoom = new JTextField(zoom + "%");
		bZoomP = new MartButton().getZoomP();
		bZoomM = new MartButton().getZoomM();

		tfZoom.addKeyListener(pview);
		tfZoom.setPreferredSize(ctrlDim);
		bZoomP.setPreferredSize(ctrlDim);
		bZoomM.setPreferredSize(ctrlDim);

		bPrec.addActionListener(this);
		bSuivant.addActionListener(this);
		bZoomM.addActionListener(this);
		bZoomP.addActionListener(this);

		add(bPrec);
		add(tfPage);
		add(bSuivant);

		add(bZoomM);
		add(tfZoom);
		add(bZoomP);
	}

	public int getPage() {
		return page;
	}

	public void setPage(int page) {
		this.page = page;
	}

	public double getZoom() {
		return zoom;
	}

	public void setZoom(double d) {
		tfZoom.setText(d + "%");
		this.zoom = d;

		afficherZoom();
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		Component source = (Component) e.getSource();

		if (source == bPrec) {
			decrementPage();
		}

		if (source == bSuivant) {
			incrementPage();
		}

		if (source == bZoomM) {
			decrementZoom();
		}

		if (source == bZoomP) {
			incrementZoom();
		}

	}

	private void decrementPage() {
		if (page > 1) {
			page--;
			tfPage.setText(String.valueOf(page));
			pview.setCurrentPage(page);
		}
	}

	private void incrementPage() {
		if (page < nbrePage) {
			page++;
			tfPage.setText(String.valueOf(page));
			pview.setCurrentPage(page);
		}
	}

	public int getNbrePage() {
		return nbrePage;
	}

	public void setNbrePage(int nbrePage) {
		this.nbrePage = nbrePage;
	}

	private void incrementZoom() {
		if (zoom < 2) {
			zoom = zoom + 0.1;
			pview.setZoom(zoom);
			afficherZoom();
		}
	}

	private void afficherZoom() {
		String str = String.valueOf((int) (zoom * 100));
		tfZoom.setText(str);
	}

	private void decrementZoom() {
		if (zoom > 0.3) {
			zoom = zoom - 0.1;
			pview.setZoom(zoom);
			afficherZoom();
		}
	}
}
